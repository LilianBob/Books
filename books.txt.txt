>>> book1 = Book.objects.create(title= 'C Sharp')
>>> book2 = Books.objects.create(title= 'Java')
>>> books= Book.objects.create(title= 'python')
>>> book4= Book.objects.create(title= 'PHP')
>>> book5= Book.objects.create(title= 'Ruby')
>>> quit()

(djangoPy3Env) C:\Users\lilli\OneDrive\Documents\Python\python_stack\my_environments\django\django_orm\Books>python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> ""
Migrations for 'books_authors':
  books_authors\migrations\0002_author_notes.py
    - Add field notes to author

(djangoPy3Env) C:\Users\lilli\OneDrive\Documents\Python\python_stack\my_environments\django\django_orm\Books>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors, contenttypes, sessions
Running migrations:
  Applying books_authors.0002_author_notes... OK

(djangoPy3Env) C:\Users\lilli\OneDrive\Documents\Python\python_stack\my_environments\django\django_orm\Books>python manage.py shell
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> author1 = Author.objects.create(first_name = 'Jane', last_name = 'Austen')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Author' is not defined
>>> from books_authors.models import Book, Author
>>> >>> author1 = Author.objects.create(first_name = 'Jane', last_name = 'Austen')
>>> author2 = Author.objects.create(first_name = 'Emily', last_name = 'Dickinson')
>>> author3 = Author.objects.create(first_name = 'Fyodor', last_name = 'Dostoevksy')
>>> author4 = Author.objects.create(first_name = 'William', last_name = 'Shakespeare')
>>> author5 = Author.objects.create(first_name = 'Lau', last_name = 'Tzu')

>>> book1.title= "C#"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'book1' is not defined
>>> c= Book.objects.get(id=1)
>>> c.title = "C#"
>>> c
<Book: <User object: C# >>
>>>c.save()

>>> author4.first_name= "Bill"
>>> author4.save()
>>> author4
<Author: <User object: Bill Shakespeare>>

>>> c.authors.add(author1)
>>> b= Book.objects.get(id=2)
>>> b.authors.add(author1)
>>> a= Book.objects.get(id=3)
>>> c.authors.add(author 2)
  File "<console>", line 1
    c.authors.add(author 2)
                         ^
SyntaxError: invalid syntax
>>> c.authors.add(author2)
>>> b.authors.add(author2)
>>> a.authors.add(author2)
>>> d= Book.objects.get(id=4)
>>> c.authors.add(author3)
>>> b.authors.add(author3)
>>> a.authors.add(author3)
>>> d.authors.add(author3)

>>> e = Book.objects.all()
>>> e.authors.add(author4)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'authors'
>>> e= Book.objects.get(id=5)
>>> for object in e: e.authors.add(author4);
... 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: 'Book' object is not iterable
>>> c.authors.add(author4)
>>> b.authors.add(author4)
>>> a.authors.add(author4)
>>> d.authors.add(author4)
>>> e.authors.add(author4)

a.authors.all()
<QuerySet [<Author: <User object: Emily Dickinson>>, <Author: <User object: Fyodor Dostoevksy>>, <Author: <User object: Bill Shakespeare>>]>

>>> a.authors.remove(author2)
>>> a
<Book: <User object: python >>
>>> a.authors.all()
<QuerySet [<Author: <User object: Fyodor Dostoevksy>>, <Author: <User object: Bill Shakespeare>>]>

>>> a.authors.all()
<QuerySet [<Author: <User object: Fyodor Dostoevksy>>, <Author: <User object: Bill Shakespeare>>]>

>>> b.authors.add(author5)

>>> author3.books.all()
<QuerySet [<Book: <User object: C# >>, <Book: <User object: Java >>, <Book: <User object: python >>, <Book: <User object: PHP >>]>
>>> e.authors.all()

<QuerySet [<Author: <User object: Bill Shakespeare>>]>
>>>

